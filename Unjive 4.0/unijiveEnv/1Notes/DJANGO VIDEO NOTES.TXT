

**should probably figure out at some point how to prevent someone from just typing the url www.unijive.com/Calculus-II-Mugglin 
    and being taken to that page if they are not in the chat

2:44-2:51

UNIQUE SLUG GENERATOR   
    -importing a function from his site to generate unique slugs
        -ex) slugs are currently numbers (primary keys or userID)
            -instead we could use the generator to create slugs such as /farquad to view farquad's profile page
            -this is probably the only page the generator would be useful for since every other page is already unique to user 
    -also showed how you can use   '@property' inside class of Model to reference fields as other words
        -ex) @property
             def title(self):           now instead of object.name  we can also refer to it as object.title
                return self.name
    -so he takes out the get_object function inside the detai view since he's no longer using the primary key as the slug but an actual
     generated slug

2:51-2:58

pre_save and post_save
    -imported from django.db.models.signals
    -you can define a pre_save_receiver and post_save_receiver method not in any classes(standalone)
        -ex) example of function with arguments
            def rl_pre_save_receiver(sender, instance, *args, **kwargs):
                // include whatever you want to do before the instance is saved to the database
                // dont have to call instance.save() here since its about to be saved anyway
            
            def rl_post_save_receiver(sender, instance, created, *args, **kwargs):
                // include whatever you want to do after the instance has been saved to the database
                // created arguement specifies whether the object was created or not(probably a bool, didnt look into this)
                // you can call instance.save() here be be careful not to send it into an infinite loop since it will call 
                // post_save_receiver as many times as it saves (ex. post_save_receiver -> save() -> post_save_receiver -> save() etc.   )

        -after defining, need to connect using built in function    
            ex) pre_save.connect(rl_pre_save_receiver, sender = RestaurantLocation) **sender is the model that you want to call the pre_save function above
                post_save.connect(rl_post_save_receiver, sender = RestaurantLocation)

        -he uses this to generate the slugs in the pre_save_receiver
            -ex) calls the generate and sets instance.slug equal to the result of the generator 
                -so after the fields have been filled(name, location, category, etc.) the slug is generated off the name, so does it before save

2:58-3:00

slugs as parameters
    -he changes url from taking the rest_id back to a slug 
    -so now he no longer needs get_object from RestaurantDetailView since we're using slugs again
    -so then he sets the restaurants on the list view to links and the <a> tag has href value of {{obj.slug}}
        ex) <a href ="restaurants/{{obj.slug}}/ " >
            so now the slug can be reference and used in place for the link



3:00-

Get Single Items from the db
    -after getting a queryset you can get individual objects from it based on the order they are in the queryset by indexing
        -ex) queryset.first() -> returns first item in set
             queryset.last() -> returns last item in set
             queryset[1] -> return 2nd item
             etc.
    -.filter call on specific field of model returns query where field matches given value  
        -ex) RestaurantLocation.objects.filter(category__iexact='mexican') returns queryset of all items in RestaurantLocation 
                that have category listed as 'mexican'
    -